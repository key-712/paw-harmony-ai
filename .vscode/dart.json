{
	"consumer_widget": {
		"prefix": "consumer_widget",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends ConsumerWidget {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"    super.key,",
			"    required this.${1:param},",
			"  });",
			"",
			"  final String ${1:param};",
			"",
			"  @override",
			"  Widget build(BuildContext context, WidgetRef ref) {",
			"    /// 実際のwidgetに置き換えてください",
			"    return const ${2:Spacer()};",
			"  }",
			"}",
			""
		]
	},
	"data_source": {
		"prefix": "data_source",
		"description": "共通のDataSourceクラスを作成するためのスニペット",
		"body": [
			"import 'package:dio/dio.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"import 'package:retrofit/retrofit.dart';",
			"",
			"import '../../import/model.dart';",
			"",
			"part '${TM_FILENAME_BASE}.g.dart';",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}クラスのインスタンスを管理するプロバイダ",
			"final ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Provider =",
			"    Provider.family<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}, Dio>((ref, dio) {",
			"  return ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(dio);",
			"});",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}関連のWebAPIのデータソースクラス",
			"@RestApi()",
			"// ignore: one_member_abstracts",
			"abstract class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(Dio dio) => _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(dio);",
			"",
			"  /// HTTPメソッド:GET /api/employees/${1:endpoint}",
			"  @GET('/api/employees/${1:endpoint}')",
			"  Future<${TM_FILENAME_BASE/^([^_]+).*/${1:/capitalize}/}> ${2:hogehoge}();",
			"}",
			""
		]
	},
	"model,api_log": {
		"prefix": [
			"model",
			"api_log"
		],
		"description": "共通のmodelクラス、logクラスを作成するためのスニペット",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${TM_FILENAME_BASE}.freezed.dart';",
			"part '${TM_FILENAME_BASE}.g.dart';",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}の情報を取得するWebAPIのレスポンスを格納するクラス",
			"@freezed",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"    required String ${1:param},",
			"  }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
			"",
			"  /// jsonデータを元に、当クラスのインスタンス作成します",
			"  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.fromJson(Map<String, dynamic> json) =>",
			"      _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}FromJson(json);",
			"}",
			""
		]
	},
	"repository": {
		"prefix": "repository",
		"description": "共通のWebAPIのデータソースへのアクセス機能を提供するリポジトリ",
		"body": [
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"import '../../import/datasource.dart';",
			"import '../../import/model.dart';",
			"import '../../import/type.dart';",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}クラスのインスタンスを管理するプロバイダ",
			"final ${TM_FILENAME_BASE/^([^_]+).*/${1:/downcase}/}RepositoryProvider = Provider<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>((ref) {",
			"  final dio = ref.watch(dioProvider);",
			"  final dioCache = ref.watch(dioCacheProvider);",
			"  final dataSource = ref.watch(${TM_FILENAME_BASE/^([^_]+).*/${1:/downcase}/}DataSourceProvider(dio));",
			"  final dataSourceCache = ref.watch(${TM_FILENAME_BASE/^([^_]+).*/${1:/downcase}/}DataSourceProvider(dioCache));",
			"  return ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(",
			"    dataSource: dataSource,",
			"    dataSourceCache: dataSourceCache,",
			"  );",
			"});",
			"",
			"/// ${TM_FILENAME_BASE/^([^_]+).*/${1:/downcase}/}関連のWebAPIのデータソースへのアクセス機能を提供するクラス",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"    required this.dataSource,",
			"    required this.dataSourceCache,",
			"  });",
			"",
			"  final ${TM_FILENAME_BASE/^([^_]+).*/${1:/capitalize}/}DataSource dataSource;",
			"  final ${TM_FILENAME_BASE/^([^_]+).*/${1:/capitalize}/}DataSource dataSourceCache;",
			"",
			"  /// データソースを取得します",
			"  ${TM_FILENAME_BASE/^([^_]+).*/${1:/capitalize}/}DataSource getDataSource({",
			"    required bool useCache,",
			"  }) {",
			"    return useCache ? dataSourceCache : dataSource;",
			"  }",
			"",
			"  /// ${2:目的を記載}",
			"  /// 必要に応じて修正して下さい",
			"  Future<Result<${TM_FILENAME_BASE/^([^_]+).*/${1:/capitalize}/}>> crudHogehoge({",
			"    bool useCache = false,",
			"  }) {",
			"    return Result.guardFuture(",
			"      future: dataSource.crudHogehoge,",
			"    );",
			"  }",
			"}",
			""
		]
	},
	"hook": {
		"prefix": "hook",
		"description": "共通のhookを作成するためのスニペット",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:flutter_hooks/flutter_hooks.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"/// ${1:Hooksの説明}",
			"void ${TM_FILENAME_BASE/_(.)/${1:/upcase}/g}({",
			"  required BuildContext context,",
			"  required WidgetRef ref,",
			"}) {",
			"  useEffect(",
			"    () {",
			"    /// ${2:ロジックを記載}",
			"      return null;",
			"    },",
			"    const [],",
			"  );",
			"}",
			""
		]
	},
	"provider,state_notifier": {
		"prefix": [
			"provider",
			"state_notifier"
		],
		"description": "共通のStateNotifierを作成するためのスニペット",
		"body": [
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"/// ...を管理するプロバイダ",
			"final ${TM_FILENAME_BASE/_(.)/${1:/upcase}/g}Provider = StateNotifierProvider<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}, void>(",
			"  (ref) => ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(),",
			");",
			"",
			"/// ...するクラス",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StateNotifier<void> {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() : super(false);",
			"",
			"  /// 処理を実行します",
			"  void hogehoge({",
			"    required String value,",
			"  }) {",
			"    /// ロジックを記載",
			"  }",
			"}",
			""
		]
	},
	"typed_go_route": {
		"prefix": "typed_go_route",
		"description": "TypedGoRouteを用いた基本的な画面遷移データクラスのスニペット",
		"body": [
			"/// ${1:RouteName}画面への遷移データクラス",
			"@TypedGoRoute<${1:RouteName}>(",
			"  path: '/${2:route}',",
			")",
			"class ${1:RouteName} extends GoRouteData {",
			"  const ${1:RouteName}();",
			"",
			"  @override",
			"  Widget build(BuildContext context, GoRouterState state) => const ${3:WidgetName}();",
			"}",
			""
		]
	},
	"fullscreen_go_route": {
		"prefix": "fullscreen_go_route",
		"description": "フルスクリーンダイアログ用GoRouteデータクラスのスニペット",
		"body": [
			"/// ${4:FullScreenRouteName}画面への遷移データクラス",
			"@TypedGoRoute<${4:FullScreenRouteName}>(",
			"  path: '/${5:FullScreen}',",
			")",
			"class ${4:FullScreenRouteName} extends GoRouteData {",
			"  const ${4:FullScreenRouteName}();",
			"",
			"  @override",
			"  Page<void> buildPage(",
			"    BuildContext context,",
			"    GoRouterState state,",
			"  ) =>",
			"      const MaterialPage(",
			"        fullscreenDialog: true,",
			"        child: ${6:FullScreen}(),",
			"      );",
			"}",
			""
		]
	},
	"screen": {
		"prefix": "screen",
		"description": "Screenページを作成するためのスニペット",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"import 'package:widgetbook_annotation/widgetbook_annotation.dart' as widgetbook;",
			"",
			"import '../../import/component.dart';",
			"import '../../import/hook.dart';",
			"import '../../import/theme.dart';",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}画面",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends HookConsumerWidget {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({super.key});",
			"",
			"  @override",
			"  Widget build(BuildContext context, WidgetRef ref) {",
			"    final theme = ref.watch(appThemeProvider);",
			"",
			"    useNetworkCheck(context: context, ref: ref);",
			"",
			"    return ContainerWithLoading(",
			"      child: Scaffold(",
			"        backgroundColor: theme.appColors.background,",
			"",
			"        /// 画面を作成して下さい",
			"        body: Container(),",
			"      ),",
			"    );",
			"  }",
			"}",
			"",
			"/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ウィジェットのWidgetbookでの確認用メソッド",
			"/// 必要に応じて修正して下さい",
			"@widgetbook.UseCase(",
			"name: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Label.screen',",
			"type: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/},",
			")",
			"Widget ${TM_FILENAME_BASE/_(.)/${1:/upcase}/g}UseCase(BuildContext context) {",
			"  return const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}();",
			"}",
			""
		]
	},
	"constant_keys_class": {
		"prefix": "constant_keys",
		"description": "定数を管理するクラスのスニペット",
		"body": [
			"/// ${1:説明文を入力してください}",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"  ${2:// 各定数を追加してください}",
			"  static const ${3:key1} = '${4:value1}';",
			"}",
			""
		]
	}
}